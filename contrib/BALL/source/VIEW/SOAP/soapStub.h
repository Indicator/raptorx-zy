/* soapStub.h
   Generated by gSOAP 2.7.9a from eutils_lite.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE__ns6__ItemType_Type
#define SOAP_TYPE__ns6__ItemType_Type (105)
/* ns6:ItemType-Type */
enum _ns6__ItemType_Type {_ns6__ItemType_Type__Integer = 0, _ns6__ItemType_Type__Date = 1, _ns6__ItemType_Type__String = 2, _ns6__ItemType_Type__Structure = 3, _ns6__ItemType_Type__List = 4, _ns6__ItemType_Type__Flags = 5, _ns6__ItemType_Type__Qualifier = 6, _ns6__ItemType_Type__Enumerator = 7, _ns6__ItemType_Type__Unknown = 8};
#endif

#ifndef SOAP_TYPE__ns7__IdType_HasLinkOut
#define SOAP_TYPE__ns7__IdType_HasLinkOut (141)
/* ns7:IdType-HasLinkOut */
enum _ns7__IdType_HasLinkOut {_ns7__IdType_HasLinkOut__Y = 0, _ns7__IdType_HasLinkOut__N = 1};
#endif

#ifndef SOAP_TYPE__ns7__IdType_HasNeighbor
#define SOAP_TYPE__ns7__IdType_HasNeighbor (142)
/* ns7:IdType-HasNeighbor */
enum _ns7__IdType_HasNeighbor {_ns7__IdType_HasNeighbor__Y = 0, _ns7__IdType_HasNeighbor__N = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do no redeclare */

#endif



#ifndef SOAP_TYPE_ns3__ResultItemType
#define SOAP_TYPE_ns3__ResultItemType (9)
/* ns3:ResultItemType */
class SOAP_CMAC ns3__ResultItemType
{
public:
	std::string DbName;	/* required element of type xsd:string */
	std::string MenuName;	/* required element of type xsd:string */
	std::string Count;	/* required element of type xsd:string */
	std::string Status;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns3__ResultItemType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ResultItemType() : soap(NULL) { }
	virtual ~ns3__ResultItemType() { }
};
#endif

#ifndef SOAP_TYPE_ns3__eGQueryResultType
#define SOAP_TYPE_ns3__eGQueryResultType (10)
/* ns3:eGQueryResultType */
class SOAP_CMAC ns3__eGQueryResultType
{
public:
	std::string *ERROR_;	/* optional element of type xsd:string */
	std::vector<ns3__ResultItemType * >ResultItem;	/* required element of type ns3:ResultItemType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns3__eGQueryResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__eGQueryResultType() : ERROR_(NULL), soap(NULL) { }
	virtual ~ns3__eGQueryResultType() { }
};
#endif

#ifndef SOAP_TYPE_ns3__GQueryResultType
#define SOAP_TYPE_ns3__GQueryResultType (11)
/* ns3:GQueryResultType */
class SOAP_CMAC ns3__GQueryResultType
{
public:
	std::string Term;	/* required element of type xsd:string */
	ns3__eGQueryResultType *eGQueryResult;	/* required element of type ns3:eGQueryResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns3__GQueryResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__GQueryResultType() : eGQueryResult(NULL), soap(NULL) { }
	virtual ~ns3__GQueryResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Result
#define SOAP_TYPE__ns3__Result (12)
/* ns3:Result */
class SOAP_CMAC _ns3__Result
{
public:
	std::string Term;	/* RPC return element */	/* required element of type xsd:string */
	ns3__eGQueryResultType *eGQueryResult;	/* required element of type ns3:eGQueryResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns3__Result */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Result() : eGQueryResult(NULL), soap(NULL) { }
	virtual ~_ns3__Result() { }
};
#endif

#ifndef SOAP_TYPE__ns3__eGqueryRequest
#define SOAP_TYPE__ns3__eGqueryRequest (13)
/* ns3:eGqueryRequest */
class SOAP_CMAC _ns3__eGqueryRequest
{
public:
	std::string *term;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE__ns3__eGqueryRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__eGqueryRequest() : term(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns3__eGqueryRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns3__eGqueryRequestMS
#define SOAP_TYPE__ns3__eGqueryRequestMS (14)
/* ns3:eGqueryRequestMS */
class SOAP_CMAC _ns3__eGqueryRequestMS
{
public:
	std::string *term;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE__ns3__eGqueryRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__eGqueryRequestMS() : term(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns3__eGqueryRequestMS() { }
};
#endif

#ifndef SOAP_TYPE__ns3__ResultMS
#define SOAP_TYPE__ns3__ResultMS (15)
/* ns3:ResultMS */
class SOAP_CMAC _ns3__ResultMS
{
public:
	ns3__GQueryResultType *Result;	/* RPC return element */	/* optional element of type ns3:GQueryResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns3__ResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ResultMS() : Result(NULL), soap(NULL) { }
	virtual ~_ns3__ResultMS() { }
};
#endif

#ifndef SOAP_TYPE_ns4__DbInfoType
#define SOAP_TYPE_ns4__DbInfoType (16)
/* ns4:DbInfoType */
class SOAP_CMAC ns4__DbInfoType
{
public:
	std::string DbName;	/* required element of type xsd:string */
	std::string MenuName;	/* required element of type xsd:string */
	std::string Description;	/* required element of type xsd:string */
	std::string Count;	/* required element of type xsd:string */
	std::string LastUpdate;	/* required element of type xsd:string */
	class ns4__FieldListType *FieldList;	/* required element of type ns4:FieldListType */
	class ns4__LinkListType *LinkList;	/* optional element of type ns4:LinkListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns4__DbInfoType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__DbInfoType() : FieldList(NULL), LinkList(NULL), soap(NULL) { }
	virtual ~ns4__DbInfoType() { }
};
#endif

#ifndef SOAP_TYPE__ns4__union_DbListType
#define SOAP_TYPE__ns4__union_DbListType (80)
/* xsd:choice */
union _ns4__union_DbListType
{
#define SOAP_UNION__ns4__union_DbListType_DbName	(1)
	std::vector<std::string >*DbName;
};
#endif

#ifndef SOAP_TYPE_ns4__DbListType
#define SOAP_TYPE_ns4__DbListType (17)
/* ns4:DbListType */
class SOAP_CMAC ns4__DbListType
{
public:
	int __union_DbListType;	/* union discriminant (of union defined below) */
	union _ns4__union_DbListType union_DbListType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns4__DbListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__DbListType() : soap(NULL) { }
	virtual ~ns4__DbListType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FieldType
#define SOAP_TYPE_ns4__FieldType (18)
/* ns4:FieldType */
class SOAP_CMAC ns4__FieldType
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::string Description;	/* required element of type xsd:string */
	std::string TermCount;	/* required element of type xsd:string */
	std::string IsDate;	/* required element of type xsd:string */
	std::string IsNumerical;	/* required element of type xsd:string */
	std::string SingleToken;	/* required element of type xsd:string */
	std::string Hierarchy;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns4__FieldType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FieldType() : soap(NULL) { }
	virtual ~ns4__FieldType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__FieldListType
#define SOAP_TYPE_ns4__FieldListType (19)
/* ns4:FieldListType */
class SOAP_CMAC ns4__FieldListType
{
public:
	std::vector<ns4__FieldType * >Field;	/* optional element of type ns4:FieldType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns4__FieldListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__FieldListType() : soap(NULL) { }
	virtual ~ns4__FieldListType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__LinkType
#define SOAP_TYPE_ns4__LinkType (20)
/* ns4:LinkType */
class SOAP_CMAC ns4__LinkType
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::string Menu;	/* required element of type xsd:string */
	std::string Description;	/* required element of type xsd:string */
	std::string DbTo;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns4__LinkType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__LinkType() : soap(NULL) { }
	virtual ~ns4__LinkType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__LinkListType
#define SOAP_TYPE_ns4__LinkListType (21)
/* ns4:LinkListType */
class SOAP_CMAC ns4__LinkListType
{
public:
	std::vector<ns4__LinkType * >Link;	/* optional element of type ns4:LinkType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns4__LinkListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__LinkListType() : soap(NULL) { }
	virtual ~ns4__LinkListType() { }
};
#endif

#ifndef SOAP_TYPE_ns4__eInfoResultType
#define SOAP_TYPE_ns4__eInfoResultType (22)
/* ns4:eInfoResultType */
class SOAP_CMAC ns4__eInfoResultType
{
public:
	std::string *ERROR_;	/* optional element of type xsd:string */
	ns4__DbListType *DbList;	/* optional element of type ns4:DbListType */
	ns4__DbInfoType *DbInfo;	/* optional element of type ns4:DbInfoType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns4__eInfoResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__eInfoResultType() : ERROR_(NULL), DbList(NULL), DbInfo(NULL), soap(NULL) { }
	virtual ~ns4__eInfoResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns4__eInfoResult
#define SOAP_TYPE__ns4__eInfoResult (23)
/* ns4:eInfoResult */
class SOAP_CMAC _ns4__eInfoResult
{
public:
	std::string *ERROR_;	/* RPC return element */	/* optional element of type xsd:string */
	ns4__DbListType *DbList;	/* optional element of type ns4:DbListType */
	ns4__DbInfoType *DbInfo;	/* optional element of type ns4:DbInfoType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns4__eInfoResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__eInfoResult() : ERROR_(NULL), DbList(NULL), DbInfo(NULL), soap(NULL) { }
	virtual ~_ns4__eInfoResult() { }
};
#endif

#ifndef SOAP_TYPE__ns4__eInfoRequest
#define SOAP_TYPE__ns4__eInfoRequest (24)
/* ns4:eInfoRequest */
class SOAP_CMAC _ns4__eInfoRequest
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns4__eInfoRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__eInfoRequest() : db(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns4__eInfoRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns4__eInfoRequestMS
#define SOAP_TYPE__ns4__eInfoRequestMS (25)
/* ns4:eInfoRequestMS */
class SOAP_CMAC _ns4__eInfoRequestMS
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns4__eInfoRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__eInfoRequestMS() : db(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns4__eInfoRequestMS() { }
};
#endif

#ifndef SOAP_TYPE__ns4__eInfoResultMS
#define SOAP_TYPE__ns4__eInfoResultMS (26)
/* ns4:eInfoResultMS */
class SOAP_CMAC _ns4__eInfoResultMS
{
public:
	ns4__eInfoResultType *eInfoResult;	/* RPC return element */	/* optional element of type ns4:eInfoResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns4__eInfoResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns4__eInfoResultMS() : eInfoResult(NULL), soap(NULL) { }
	virtual ~_ns4__eInfoResultMS() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ErrorListType
#define SOAP_TYPE_ns5__ErrorListType (27)
/* ns5:ErrorListType */
class SOAP_CMAC ns5__ErrorListType
{
public:
	std::vector<std::string >PhraseNotFound;	/* optional element of type xsd:string */
	std::vector<std::string >FieldNotFound;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns5__ErrorListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ErrorListType() : soap(NULL) { }
	virtual ~ns5__ErrorListType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__IdListType
#define SOAP_TYPE_ns5__IdListType (28)
/* ns5:IdListType */
class SOAP_CMAC ns5__IdListType
{
public:
	std::vector<std::string >Id;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns5__IdListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__IdListType() : soap(NULL) { }
	virtual ~ns5__IdListType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__TermSetType
#define SOAP_TYPE_ns5__TermSetType (29)
/* ns5:TermSetType */
class SOAP_CMAC ns5__TermSetType
{
public:
	std::string Term;	/* required element of type xsd:string */
	std::string Field;	/* required element of type xsd:string */
	std::string Count;	/* required element of type xsd:string */
	std::string Explode;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns5__TermSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TermSetType() : soap(NULL) { }
	virtual ~ns5__TermSetType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__TranslationType
#define SOAP_TYPE_ns5__TranslationType (30)
/* ns5:TranslationType */
class SOAP_CMAC ns5__TranslationType
{
public:
	std::string From;	/* required element of type xsd:string */
	std::string To;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns5__TranslationType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TranslationType() : soap(NULL) { }
	virtual ~ns5__TranslationType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__TranslationSetType
#define SOAP_TYPE_ns5__TranslationSetType (31)
/* ns5:TranslationSetType */
class SOAP_CMAC ns5__TranslationSetType
{
public:
	std::vector<ns5__TranslationType * >Translation;	/* optional element of type ns5:TranslationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns5__TranslationSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TranslationSetType() : soap(NULL) { }
	virtual ~ns5__TranslationSetType() { }
};
#endif

#ifndef SOAP_TYPE__ns5__union_TranslationStackType
#define SOAP_TYPE__ns5__union_TranslationStackType (92)
/* xsd:choice */
union _ns5__union_TranslationStackType
{
#define SOAP_UNION__ns5__union_TranslationStackType_TermSet	(1)
	ns5__TermSetType *TermSet;
#define SOAP_UNION__ns5__union_TranslationStackType_OP	(2)
	std::string *OP;
};
#endif

#ifndef SOAP_TYPE___ns5__union_TranslationStackType
#define SOAP_TYPE___ns5__union_TranslationStackType (90)
/* Operation wrapper: */
struct __ns5__union_TranslationStackType
{
public:
	int __union_TranslationStackType;	/* union discriminant (of union defined below) */
	union _ns5__union_TranslationStackType union_TranslationStackType;	/* required element of type xsd:choice */
};
#endif

#ifndef SOAP_TYPE_ns5__TranslationStackType
#define SOAP_TYPE_ns5__TranslationStackType (32)
/* ns5:TranslationStackType */
class SOAP_CMAC ns5__TranslationStackType
{
public:
	int __size_TranslationStackType;	/* sequence of elements <-union-TranslationStackType> */
	struct __ns5__union_TranslationStackType *__union_TranslationStackType;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns5__TranslationStackType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TranslationStackType() : __union_TranslationStackType(NULL), soap(NULL) { }
	virtual ~ns5__TranslationStackType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__WarningListType
#define SOAP_TYPE_ns5__WarningListType (33)
/* ns5:WarningListType */
class SOAP_CMAC ns5__WarningListType
{
public:
	std::vector<std::string >PhraseIgnored;	/* optional element of type xsd:string */
	std::vector<std::string >QuotedPhraseNotFound;	/* optional element of type xsd:string */
	std::vector<std::string >OutputMessage;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns5__WarningListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__WarningListType() : soap(NULL) { }
	virtual ~ns5__WarningListType() { }
};
#endif

#ifndef SOAP_TYPE_ns5__eSearchResultType
#define SOAP_TYPE_ns5__eSearchResultType (34)
/* ns5:eSearchResultType */
class SOAP_CMAC ns5__eSearchResultType
{
public:
	ns5__ErrorListType *ErrorList;	/* optional element of type ns5:ErrorListType */
	ns5__WarningListType *WarningList;	/* optional element of type ns5:WarningListType */
	std::string *ERROR_;	/* optional element of type xsd:string */
	std::string *Count;	/* optional element of type xsd:string */
	std::string *RetMax;	/* optional element of type xsd:string */
	std::string *RetStart;	/* optional element of type xsd:string */
	std::string *QueryKey;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	ns5__IdListType *IdList;	/* optional element of type ns5:IdListType */
	ns5__TranslationSetType *TranslationSet;	/* optional element of type ns5:TranslationSetType */
	ns5__TranslationStackType *TranslationStack;	/* optional element of type ns5:TranslationStackType */
	std::string *QueryTranslation;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns5__eSearchResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__eSearchResultType() : ErrorList(NULL), WarningList(NULL), ERROR_(NULL), Count(NULL), RetMax(NULL), RetStart(NULL), QueryKey(NULL), WebEnv(NULL), IdList(NULL), TranslationSet(NULL), TranslationStack(NULL), QueryTranslation(NULL), soap(NULL) { }
	virtual ~ns5__eSearchResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns5__eSearchResult
#define SOAP_TYPE__ns5__eSearchResult (35)
/* ns5:eSearchResult */
class SOAP_CMAC _ns5__eSearchResult
{
public:
	ns5__ErrorListType *ErrorList;	/* RPC return element */	/* optional element of type ns5:ErrorListType */
	ns5__WarningListType *WarningList;	/* optional element of type ns5:WarningListType */
	std::string *ERROR_;	/* optional element of type xsd:string */
	std::string *Count;	/* optional element of type xsd:string */
	std::string *RetMax;	/* optional element of type xsd:string */
	std::string *RetStart;	/* optional element of type xsd:string */
	std::string *QueryKey;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	ns5__IdListType *IdList;	/* optional element of type ns5:IdListType */
	ns5__TranslationSetType *TranslationSet;	/* optional element of type ns5:TranslationSetType */
	ns5__TranslationStackType *TranslationStack;	/* optional element of type ns5:TranslationStackType */
	std::string *QueryTranslation;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns5__eSearchResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__eSearchResult() : ErrorList(NULL), WarningList(NULL), ERROR_(NULL), Count(NULL), RetMax(NULL), RetStart(NULL), QueryKey(NULL), WebEnv(NULL), IdList(NULL), TranslationSet(NULL), TranslationStack(NULL), QueryTranslation(NULL), soap(NULL) { }
	virtual ~_ns5__eSearchResult() { }
};
#endif

#ifndef SOAP_TYPE__ns5__eSearchRequest
#define SOAP_TYPE__ns5__eSearchRequest (36)
/* ns5:eSearchRequest */
class SOAP_CMAC _ns5__eSearchRequest
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *QueryKey;	/* optional element of type xsd:string */
	std::string *usehistory;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	std::string *field;	/* optional element of type xsd:string */
	std::string *reldate;	/* optional element of type xsd:string */
	std::string *mindate;	/* optional element of type xsd:string */
	std::string *maxdate;	/* optional element of type xsd:string */
	std::string *datetype;	/* optional element of type xsd:string */
	std::string *RetStart;	/* optional element of type xsd:string */
	std::string *RetMax;	/* optional element of type xsd:string */
	std::string *rettype;	/* optional element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns5__eSearchRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__eSearchRequest() : db(NULL), term(NULL), WebEnv(NULL), QueryKey(NULL), usehistory(NULL), tool(NULL), email(NULL), field(NULL), reldate(NULL), mindate(NULL), maxdate(NULL), datetype(NULL), RetStart(NULL), RetMax(NULL), rettype(NULL), sort(NULL), soap(NULL) { }
	virtual ~_ns5__eSearchRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns5__eSearchRequestMS
#define SOAP_TYPE__ns5__eSearchRequestMS (37)
/* ns5:eSearchRequestMS */
class SOAP_CMAC _ns5__eSearchRequestMS
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *query_USCOREkey;	/* optional element of type xsd:string */
	std::string *usehistory;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	std::string *field;	/* optional element of type xsd:string */
	std::string *reldate;	/* optional element of type xsd:string */
	std::string *mindate;	/* optional element of type xsd:string */
	std::string *maxdate;	/* optional element of type xsd:string */
	std::string *datetype;	/* optional element of type xsd:string */
	std::string *retstart;	/* optional element of type xsd:string */
	std::string *retmax;	/* optional element of type xsd:string */
	std::string *rettype;	/* optional element of type xsd:string */
	std::string *sort;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns5__eSearchRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__eSearchRequestMS() : db(NULL), term(NULL), WebEnv(NULL), query_USCOREkey(NULL), usehistory(NULL), tool(NULL), email(NULL), field(NULL), reldate(NULL), mindate(NULL), maxdate(NULL), datetype(NULL), retstart(NULL), retmax(NULL), rettype(NULL), sort(NULL), soap(NULL) { }
	virtual ~_ns5__eSearchRequestMS() { }
};
#endif

#ifndef SOAP_TYPE__ns5__eSearchResultMS
#define SOAP_TYPE__ns5__eSearchResultMS (38)
/* ns5:eSearchResultMS */
class SOAP_CMAC _ns5__eSearchResultMS
{
public:
	ns5__eSearchResultType *eSearchResult;	/* RPC return element */	/* optional element of type ns5:eSearchResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns5__eSearchResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__eSearchResultMS() : eSearchResult(NULL), soap(NULL) { }
	virtual ~_ns5__eSearchResultMS() { }
};
#endif

#ifndef SOAP_TYPE_ns6__DocSumType
#define SOAP_TYPE_ns6__DocSumType (39)
/* ns6:DocSumType */
class SOAP_CMAC ns6__DocSumType
{
public:
	std::string Id;	/* required element of type xsd:string */
	std::vector<class ns6__ItemType * >Item;	/* required element of type ns6:ItemType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns6__DocSumType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__DocSumType() : soap(NULL) { }
	virtual ~ns6__DocSumType() { }
};
#endif

#ifndef SOAP_TYPE__ns6__union_ItemType
#define SOAP_TYPE__ns6__union_ItemType (103)
/* xsd:choice */
union _ns6__union_ItemType
{
#define SOAP_UNION__ns6__union_ItemType_Item	(1)
	ns6__ItemType *Item;
};
#endif

#ifndef SOAP_TYPE___ns6__union_ItemType
#define SOAP_TYPE___ns6__union_ItemType (102)
/* Operation wrapper: */
struct __ns6__union_ItemType
{
public:
	int __union_ItemType;	/* union discriminant (of union defined below) */
	union _ns6__union_ItemType union_ItemType;	/* required element of type xsd:choice */
};
#endif

#ifndef SOAP_TYPE_ns6__ItemType
#define SOAP_TYPE_ns6__ItemType (40)
/* ns6:ItemType */
class SOAP_CMAC ns6__ItemType
{
public:
	int __size_ItemType;	/* sequence of elements <-union-ItemType> */
	struct __ns6__union_ItemType *__union_ItemType;
	std::string Name;	/* required attribute */
	enum _ns6__ItemType_Type Type;	/* required attribute */
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns6__ItemType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ItemType() : __union_ItemType(NULL), __mixed(NULL), soap(NULL) { }
	virtual ~ns6__ItemType() { }
};
#endif

#ifndef SOAP_TYPE_ns6__eSummaryResultType
#define SOAP_TYPE_ns6__eSummaryResultType (41)
/* ns6:eSummaryResultType */
class SOAP_CMAC ns6__eSummaryResultType
{
public:
	std::string *ERROR_;	/* optional element of type xsd:string */
	std::vector<ns6__DocSumType * >DocSum;	/* optional element of type ns6:DocSumType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns6__eSummaryResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__eSummaryResultType() : ERROR_(NULL), soap(NULL) { }
	virtual ~ns6__eSummaryResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns6__eSummaryResult
#define SOAP_TYPE__ns6__eSummaryResult (42)
/* ns6:eSummaryResult */
class SOAP_CMAC _ns6__eSummaryResult
{
public:
	std::string *ERROR_;	/* RPC return element */	/* optional element of type xsd:string */
	std::vector<ns6__DocSumType * >DocSum;	/* optional element of type ns6:DocSumType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns6__eSummaryResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__eSummaryResult() : ERROR_(NULL), soap(NULL) { }
	virtual ~_ns6__eSummaryResult() { }
};
#endif

#ifndef SOAP_TYPE__ns6__eSummaryRequest
#define SOAP_TYPE__ns6__eSummaryRequest (43)
/* ns6:eSummaryRequest */
class SOAP_CMAC _ns6__eSummaryRequest
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *id;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *query_USCOREkey;	/* optional element of type xsd:string */
	std::string *retstart;	/* optional element of type xsd:string */
	std::string *retmax;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns6__eSummaryRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__eSummaryRequest() : db(NULL), id(NULL), WebEnv(NULL), query_USCOREkey(NULL), retstart(NULL), retmax(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns6__eSummaryRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns6__eSummaryRequestMS
#define SOAP_TYPE__ns6__eSummaryRequestMS (44)
/* ns6:eSummaryRequestMS */
class SOAP_CMAC _ns6__eSummaryRequestMS
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *id;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *query_USCOREkey;	/* optional element of type xsd:string */
	std::string *retstart;	/* optional element of type xsd:string */
	std::string *retmax;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__ns6__eSummaryRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__eSummaryRequestMS() : db(NULL), id(NULL), WebEnv(NULL), query_USCOREkey(NULL), retstart(NULL), retmax(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns6__eSummaryRequestMS() { }
};
#endif

#ifndef SOAP_TYPE__ns6__eSummaryResultMS
#define SOAP_TYPE__ns6__eSummaryResultMS (45)
/* ns6:eSummaryResultMS */
class SOAP_CMAC _ns6__eSummaryResultMS
{
public:
	ns6__eSummaryResultType *eSummaryResult;	/* RPC return element */	/* optional element of type ns6:eSummaryResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__ns6__eSummaryResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns6__eSummaryResultMS() : eSummaryResult(NULL), soap(NULL) { }
	virtual ~_ns6__eSummaryResultMS() { }
};
#endif

#ifndef SOAP_TYPE__ns7__union_IdCheckListType
#define SOAP_TYPE__ns7__union_IdCheckListType (112)
/* xsd:choice */
union _ns7__union_IdCheckListType
{
#define SOAP_UNION__ns7__union_IdCheckListType_Id	(1)
	class ns7__IdType *Id;
#define SOAP_UNION__ns7__union_IdCheckListType_IdLinkSet	(2)
	class ns7__IdLinkSetType *IdLinkSet;
};
#endif

#ifndef SOAP_TYPE___ns7__union_IdCheckListType
#define SOAP_TYPE___ns7__union_IdCheckListType (109)
/* Operation wrapper: */
struct __ns7__union_IdCheckListType
{
public:
	int __union_IdCheckListType;	/* union discriminant (of union defined below) */
	union _ns7__union_IdCheckListType union_IdCheckListType;	/* required element of type xsd:choice */
};
#endif

#ifndef SOAP_TYPE_ns7__IdCheckListType
#define SOAP_TYPE_ns7__IdCheckListType (47)
/* ns7:IdCheckListType */
class SOAP_CMAC ns7__IdCheckListType
{
public:
	std::string *ERROR_;	/* optional element of type xsd:string */
	int __size_IdCheckListType;	/* sequence of elements <-union-IdCheckListType> */
	struct __ns7__union_IdCheckListType *__union_IdCheckListType;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns7__IdCheckListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdCheckListType() : ERROR_(NULL), __union_IdCheckListType(NULL), soap(NULL) { }
	virtual ~ns7__IdCheckListType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__IdLinkSetType
#define SOAP_TYPE_ns7__IdLinkSetType (48)
/* ns7:IdLinkSetType */
class SOAP_CMAC ns7__IdLinkSetType
{
public:
	std::vector<class ns7__LinkInfoType * >LinkInfo;	/* optional element of type ns7:LinkInfoType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns7__IdLinkSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdLinkSetType() : soap(NULL) { }
	virtual ~ns7__IdLinkSetType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__IdListType
#define SOAP_TYPE_ns7__IdListType (49)
/* ns7:IdListType */
class SOAP_CMAC ns7__IdListType
{
public:
	std::vector<ns7__IdType * >Id;	/* optional element of type ns7:IdType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns7__IdListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdListType() : soap(NULL) { }
	virtual ~ns7__IdListType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__IdUrlListType
#define SOAP_TYPE_ns7__IdUrlListType (50)
/* ns7:IdUrlListType */
class SOAP_CMAC ns7__IdUrlListType
{
public:
	std::vector<class ns7__IdUrlSetType * >IdUrlSet;	/* optional element of type ns7:IdUrlSetType */
	std::string *ERROR_;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns7__IdUrlListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdUrlListType() : ERROR_(NULL), soap(NULL) { }
	virtual ~ns7__IdUrlListType() { }
};
#endif

#ifndef SOAP_TYPE__ns7__union_IdUrlSetType
#define SOAP_TYPE__ns7__union_IdUrlSetType (122)
/* xsd:choice */
union _ns7__union_IdUrlSetType
{
#define SOAP_UNION__ns7__union_IdUrlSetType_ObjUrl	(1)
	std::vector<class ns7__ObjUrlType * >*ObjUrl;
#define SOAP_UNION__ns7__union_IdUrlSetType_Info	(2)
	std::string *Info;
};
#endif

#ifndef SOAP_TYPE_ns7__IdUrlSetType
#define SOAP_TYPE_ns7__IdUrlSetType (51)
/* ns7:IdUrlSetType */
class SOAP_CMAC ns7__IdUrlSetType
{
public:
	ns7__IdType *Id;	/* required element of type ns7:IdType */
	int __union_IdUrlSetType;	/* union discriminant (of union defined below) */
	union _ns7__union_IdUrlSetType union_IdUrlSetType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns7__IdUrlSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdUrlSetType() : Id(NULL), soap(NULL) { }
	virtual ~ns7__IdUrlSetType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__LinkType
#define SOAP_TYPE_ns7__LinkType (52)
/* ns7:LinkType */
class SOAP_CMAC ns7__LinkType
{
public:
	ns7__IdType *Id;	/* required element of type ns7:IdType */
	std::string *Score;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns7__LinkType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__LinkType() : Id(NULL), Score(NULL), soap(NULL) { }
	virtual ~ns7__LinkType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__LinkInfoType
#define SOAP_TYPE_ns7__LinkInfoType (53)
/* ns7:LinkInfoType */
class SOAP_CMAC ns7__LinkInfoType
{
public:
	std::string DbTo;	/* required element of type xsd:string */
	std::string LinkName;	/* required element of type xsd:string */
	std::string MenuTag;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns7__LinkInfoType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__LinkInfoType() : soap(NULL) { }
	virtual ~ns7__LinkInfoType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__LinkSetType
#define SOAP_TYPE_ns7__LinkSetType (54)
/* ns7:LinkSetType */
class SOAP_CMAC ns7__LinkSetType
{
public:
	std::string DbFrom;	/* required element of type xsd:string */
	std::string *ERROR_;	/* optional element of type xsd:string */
	ns7__IdListType *IdList;	/* optional element of type ns7:IdListType */
	std::vector<class ns7__LinkSetDbType * >LinkSetDb;	/* optional element of type ns7:LinkSetDbType */
	ns7__IdUrlListType *IdUrlList;	/* optional element of type ns7:IdUrlListType */
	ns7__IdCheckListType *IdCheckList;	/* optional element of type ns7:IdCheckListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_ns7__LinkSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__LinkSetType() : ERROR_(NULL), IdList(NULL), IdUrlList(NULL), IdCheckList(NULL), soap(NULL) { }
	virtual ~ns7__LinkSetType() { }
};
#endif

#ifndef SOAP_TYPE__ns7__union_LinkSetDbType
#define SOAP_TYPE__ns7__union_LinkSetDbType (131)
/* xsd:choice */
union _ns7__union_LinkSetDbType
{
#define SOAP_UNION__ns7__union_LinkSetDbType_Link	(1)
	std::vector<ns7__LinkType * >*Link;
#define SOAP_UNION__ns7__union_LinkSetDbType_Info	(2)
	std::string *Info;
};
#endif

#ifndef SOAP_TYPE_ns7__LinkSetDbType
#define SOAP_TYPE_ns7__LinkSetDbType (55)
/* ns7:LinkSetDbType */
class SOAP_CMAC ns7__LinkSetDbType
{
public:
	std::string DbTo;	/* required element of type xsd:string */
	std::string LinkName;	/* required element of type xsd:string */
	std::string *ERROR_;	/* optional element of type xsd:string */
	int __union_LinkSetDbType;	/* union discriminant (of union defined below) */
	union _ns7__union_LinkSetDbType union_LinkSetDbType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_ns7__LinkSetDbType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__LinkSetDbType() : ERROR_(NULL), soap(NULL) { }
	virtual ~ns7__LinkSetDbType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__ObjUrlType
#define SOAP_TYPE_ns7__ObjUrlType (56)
/* ns7:ObjUrlType */
class SOAP_CMAC ns7__ObjUrlType
{
public:
	std::string Url;	/* required element of type xsd:string */
	std::string *IconUrl;	/* optional element of type xsd:string */
	std::string *LinkName;	/* optional element of type xsd:string */
	std::vector<std::string >SubjectType;	/* optional element of type xsd:string */
	std::vector<std::string >Attribute;	/* optional element of type xsd:string */
	class ns7__ProviderType *Provider;	/* required element of type ns7:ProviderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns7__ObjUrlType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__ObjUrlType() : IconUrl(NULL), LinkName(NULL), Provider(NULL), soap(NULL) { }
	virtual ~ns7__ObjUrlType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__ProviderType
#define SOAP_TYPE_ns7__ProviderType (57)
/* ns7:ProviderType */
class SOAP_CMAC ns7__ProviderType
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::string NameAbbr;	/* required element of type xsd:string */
	ns7__IdType *Id;	/* required element of type ns7:IdType */
	std::string Url;	/* required element of type xsd:string */
	std::string *IconUrl;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns7__ProviderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__ProviderType() : Id(NULL), IconUrl(NULL), soap(NULL) { }
	virtual ~ns7__ProviderType() { }
};
#endif

#ifndef SOAP_TYPE_ns7__eLinkResultType
#define SOAP_TYPE_ns7__eLinkResultType (58)
/* ns7:eLinkResultType */
class SOAP_CMAC ns7__eLinkResultType
{
public:
	std::string *ERROR_;	/* optional element of type xsd:string */
	std::vector<ns7__LinkSetType * >LinkSet;	/* optional element of type ns7:LinkSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns7__eLinkResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__eLinkResultType() : ERROR_(NULL), soap(NULL) { }
	virtual ~ns7__eLinkResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns7__eLinkResult
#define SOAP_TYPE__ns7__eLinkResult (59)
/* ns7:eLinkResult */
class SOAP_CMAC _ns7__eLinkResult
{
public:
	std::string *ERROR_;	/* RPC return element */	/* optional element of type xsd:string */
	std::vector<ns7__LinkSetType * >LinkSet;	/* optional element of type ns7:LinkSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns7__eLinkResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__eLinkResult() : ERROR_(NULL), soap(NULL) { }
	virtual ~_ns7__eLinkResult() { }
};
#endif

#ifndef SOAP_TYPE__ns7__eLinkResultMS
#define SOAP_TYPE__ns7__eLinkResultMS (60)
/* ns7:eLinkResultMS */
class SOAP_CMAC _ns7__eLinkResultMS
{
public:
	ns7__eLinkResultType *eLinkResult;	/* RPC return element */	/* optional element of type ns7:eLinkResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__ns7__eLinkResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__eLinkResultMS() : eLinkResult(NULL), soap(NULL) { }
	virtual ~_ns7__eLinkResultMS() { }
};
#endif

#ifndef SOAP_TYPE__ns7__eLinkRequest
#define SOAP_TYPE__ns7__eLinkRequest (61)
/* ns7:eLinkRequest */
class SOAP_CMAC _ns7__eLinkRequest
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::vector<std::string >id;	/* optional element of type xsd:string */
	std::string *reldate;	/* optional element of type xsd:string */
	std::string *mindate;	/* optional element of type xsd:string */
	std::string *maxdate;	/* optional element of type xsd:string */
	std::string *datetype;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *dbfrom;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *query_USCOREkey;	/* optional element of type xsd:string */
	std::string *cmd;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__ns7__eLinkRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__eLinkRequest() : db(NULL), reldate(NULL), mindate(NULL), maxdate(NULL), datetype(NULL), term(NULL), dbfrom(NULL), WebEnv(NULL), query_USCOREkey(NULL), cmd(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns7__eLinkRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns7__eLinkRequestMS
#define SOAP_TYPE__ns7__eLinkRequestMS (62)
/* ns7:eLinkRequestMS */
class SOAP_CMAC _ns7__eLinkRequestMS
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::vector<std::string >id;	/* optional element of type xsd:string */
	std::string *reldate;	/* optional element of type xsd:string */
	std::string *mindate;	/* optional element of type xsd:string */
	std::string *maxdate;	/* optional element of type xsd:string */
	std::string *datetype;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *dbfrom;	/* optional element of type xsd:string */
	std::string *WebEnv;	/* optional element of type xsd:string */
	std::string *query_USCOREkey;	/* optional element of type xsd:string */
	std::string *cmd;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__ns7__eLinkRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns7__eLinkRequestMS() : db(NULL), reldate(NULL), mindate(NULL), maxdate(NULL), datetype(NULL), term(NULL), dbfrom(NULL), WebEnv(NULL), query_USCOREkey(NULL), cmd(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns7__eLinkRequestMS() { }
};
#endif

#ifndef SOAP_TYPE__ns8__union_SpelledQueryType
#define SOAP_TYPE__ns8__union_SpelledQueryType (137)
/* xsd:choice */
union _ns8__union_SpelledQueryType
{
#define SOAP_UNION__ns8__union_SpelledQueryType_Replaced	(1)
	std::string *Replaced;
#define SOAP_UNION__ns8__union_SpelledQueryType_Original	(2)
	std::string *Original;
};
#endif

#ifndef SOAP_TYPE___ns8__union_SpelledQueryType
#define SOAP_TYPE___ns8__union_SpelledQueryType (136)
/* Operation wrapper: */
struct __ns8__union_SpelledQueryType
{
public:
	int __union_SpelledQueryType;	/* union discriminant (of union defined below) */
	union _ns8__union_SpelledQueryType union_SpelledQueryType;	/* required element of type xsd:choice */
};
#endif

#ifndef SOAP_TYPE_ns8__SpelledQueryType
#define SOAP_TYPE_ns8__SpelledQueryType (63)
/* ns8:SpelledQueryType */
class SOAP_CMAC ns8__SpelledQueryType
{
public:
	int __size_SpelledQueryType;	/* sequence of elements <-union-SpelledQueryType> */
	struct __ns8__union_SpelledQueryType *__union_SpelledQueryType;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns8__SpelledQueryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__SpelledQueryType() : __union_SpelledQueryType(NULL), soap(NULL) { }
	virtual ~ns8__SpelledQueryType() { }
};
#endif

#ifndef SOAP_TYPE_ns8__eSpellResultType
#define SOAP_TYPE_ns8__eSpellResultType (64)
/* ns8:eSpellResultType */
class SOAP_CMAC ns8__eSpellResultType
{
public:
	std::string ERROR_;	/* required element of type xsd:string */
	std::string Database;	/* required element of type xsd:string */
	std::string Query;	/* required element of type xsd:string */
	std::string CorrectedQuery;	/* required element of type xsd:string */
	ns8__SpelledQueryType *SpelledQuery;	/* required element of type ns8:SpelledQueryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns8__eSpellResultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns8__eSpellResultType() : SpelledQuery(NULL), soap(NULL) { }
	virtual ~ns8__eSpellResultType() { }
};
#endif

#ifndef SOAP_TYPE__ns8__eSpellResult
#define SOAP_TYPE__ns8__eSpellResult (65)
/* ns8:eSpellResult */
class SOAP_CMAC _ns8__eSpellResult
{
public:
	std::string ERROR_;	/* RPC return element */	/* required element of type xsd:string */
	std::string Database;	/* required element of type xsd:string */
	std::string Query;	/* required element of type xsd:string */
	std::string CorrectedQuery;	/* required element of type xsd:string */
	ns8__SpelledQueryType *SpelledQuery;	/* required element of type ns8:SpelledQueryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__ns8__eSpellResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__eSpellResult() : SpelledQuery(NULL), soap(NULL) { }
	virtual ~_ns8__eSpellResult() { }
};
#endif

#ifndef SOAP_TYPE__ns8__eSpellRequest
#define SOAP_TYPE__ns8__eSpellRequest (66)
/* ns8:eSpellRequest */
class SOAP_CMAC _ns8__eSpellRequest
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE__ns8__eSpellRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__eSpellRequest() : db(NULL), term(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns8__eSpellRequest() { }
};
#endif

#ifndef SOAP_TYPE__ns8__eSpellResultMS
#define SOAP_TYPE__ns8__eSpellResultMS (67)
/* ns8:eSpellResultMS */
class SOAP_CMAC _ns8__eSpellResultMS
{
public:
	ns8__eSpellResultType *eSpellResult;	/* RPC return element */	/* optional element of type ns8:eSpellResultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE__ns8__eSpellResultMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__eSpellResultMS() : eSpellResult(NULL), soap(NULL) { }
	virtual ~_ns8__eSpellResultMS() { }
};
#endif

#ifndef SOAP_TYPE__ns8__eSpellRequestMS
#define SOAP_TYPE__ns8__eSpellRequestMS (68)
/* ns8:eSpellRequestMS */
class SOAP_CMAC _ns8__eSpellRequestMS
{
public:
	std::string *db;	/* optional element of type xsd:string */
	std::string *term;	/* optional element of type xsd:string */
	std::string *tool;	/* optional element of type xsd:string */
	std::string *email;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE__ns8__eSpellRequestMS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns8__eSpellRequestMS() : db(NULL), term(NULL), tool(NULL), email(NULL), soap(NULL) { }
	virtual ~_ns8__eSpellRequestMS() { }
};
#endif

#ifndef SOAP_TYPE_ns7__IdType
#define SOAP_TYPE_ns7__IdType (46)
/* Primitive ns7:IdType schema type: */
class SOAP_CMAC ns7__IdType
{
public:
	std::string __item;
	enum _ns7__IdType_HasLinkOut HasLinkOut;	/* optional attribute */
	enum _ns7__IdType_HasNeighbor HasNeighbor;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns7__IdType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns7__IdType() : soap(NULL) { }
	virtual ~ns7__IdType() { }
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeGquery
#define SOAP_TYPE___ns1__run_USCOREeGquery (146)
/* Operation wrapper: */
struct __ns1__run_USCOREeGquery
{
public:
	_ns3__eGqueryRequest *ns3__eGqueryRequest;	/* optional element of type ns3:eGqueryRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeGquery_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeGquery_USCOREMS (150)
/* Operation wrapper: */
struct __ns1__run_USCOREeGquery_USCOREMS
{
public:
	_ns3__eGqueryRequestMS *ns3__eGqueryRequestMS;	/* optional element of type ns3:eGqueryRequestMS */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeInfo
#define SOAP_TYPE___ns1__run_USCOREeInfo (154)
/* Operation wrapper: */
struct __ns1__run_USCOREeInfo
{
public:
	_ns4__eInfoRequest *ns4__eInfoRequest;	/* optional element of type ns4:eInfoRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeInfo_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeInfo_USCOREMS (158)
/* Operation wrapper: */
struct __ns1__run_USCOREeInfo_USCOREMS
{
public:
	_ns4__eInfoRequestMS *ns4__eInfoRequestMS;	/* optional element of type ns4:eInfoRequestMS */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSearch
#define SOAP_TYPE___ns1__run_USCOREeSearch (162)
/* Operation wrapper: */
struct __ns1__run_USCOREeSearch
{
public:
	_ns5__eSearchRequest *ns5__eSearchRequest;	/* optional element of type ns5:eSearchRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSearch_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeSearch_USCOREMS (166)
/* Operation wrapper: */
struct __ns1__run_USCOREeSearch_USCOREMS
{
public:
	_ns5__eSearchRequestMS *ns5__eSearchRequestMS;	/* optional element of type ns5:eSearchRequestMS */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSummary
#define SOAP_TYPE___ns1__run_USCOREeSummary (170)
/* Operation wrapper: */
struct __ns1__run_USCOREeSummary
{
public:
	_ns6__eSummaryRequest *ns6__eSummaryRequest;	/* optional element of type ns6:eSummaryRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSummary_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeSummary_USCOREMS (174)
/* Operation wrapper: */
struct __ns1__run_USCOREeSummary_USCOREMS
{
public:
	_ns6__eSummaryRequestMS *ns6__eSummaryRequestMS;	/* optional element of type ns6:eSummaryRequestMS */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeLink
#define SOAP_TYPE___ns1__run_USCOREeLink (178)
/* Operation wrapper: */
struct __ns1__run_USCOREeLink
{
public:
	_ns7__eLinkRequest *ns7__eLinkRequest;	/* optional element of type ns7:eLinkRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeLink_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeLink_USCOREMS (182)
/* Operation wrapper: */
struct __ns1__run_USCOREeLink_USCOREMS
{
public:
	_ns7__eLinkRequestMS *ns7__eLinkRequestMS;	/* optional element of type ns7:eLinkRequestMS */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSpell
#define SOAP_TYPE___ns1__run_USCOREeSpell (186)
/* Operation wrapper: */
struct __ns1__run_USCOREeSpell
{
public:
	_ns8__eSpellRequest *ns8__eSpellRequest;	/* optional element of type ns8:eSpellRequest */
};
#endif

#ifndef SOAP_TYPE___ns1__run_USCOREeSpell_USCOREMS
#define SOAP_TYPE___ns1__run_USCOREeSpell_USCOREMS (190)
/* Operation wrapper: */
struct __ns1__run_USCOREeSpell_USCOREMS
{
public:
	_ns8__eSpellRequestMS *ns8__eSpellRequestMS;	/* optional element of type ns8:eSpellRequestMS */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (193)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (194)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (196)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (197)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (198)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__NMTOKEN
#define SOAP_TYPE_xsd__NMTOKEN (8)
typedef std::string xsd__NMTOKEN;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeGquery(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__eGqueryRequest *ns3__eGqueryRequest, _ns3__Result *ns3__Result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeGquery_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__eGqueryRequestMS *ns3__eGqueryRequestMS, _ns3__ResultMS *ns3__ResultMS);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns4__eInfoRequest *ns4__eInfoRequest, _ns4__eInfoResult *ns4__eInfoResult);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeInfo_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns4__eInfoRequestMS *ns4__eInfoRequestMS, _ns4__eInfoResultMS *ns4__eInfoResultMS);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSearch(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns5__eSearchRequest *ns5__eSearchRequest, _ns5__eSearchResult *ns5__eSearchResult);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSearch_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns5__eSearchRequestMS *ns5__eSearchRequestMS, _ns5__eSearchResultMS *ns5__eSearchResultMS);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSummary(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns6__eSummaryRequest *ns6__eSummaryRequest, _ns6__eSummaryResult *ns6__eSummaryResult);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSummary_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns6__eSummaryRequestMS *ns6__eSummaryRequestMS, _ns6__eSummaryResultMS *ns6__eSummaryResultMS);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeLink(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns7__eLinkRequest *ns7__eLinkRequest, _ns7__eLinkResult *ns7__eLinkResult);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeLink_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns7__eLinkRequestMS *ns7__eLinkRequestMS, _ns7__eLinkResultMS *ns7__eLinkResultMS);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSpell(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns8__eSpellRequest *ns8__eSpellRequest, _ns8__eSpellResult *ns8__eSpellResult);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__run_USCOREeSpell_USCOREMS(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns8__eSpellRequestMS *ns8__eSpellRequestMS, _ns8__eSpellResultMS *ns8__eSpellResultMS);

#endif

/* End of soapStub.h */
